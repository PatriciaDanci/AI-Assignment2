============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 98 was started by denis on DESKTOP-P9L93MQ,
Sun Dec  8 21:12:00 2024
The command was "/mnt/c/Users/dandr/Desktop/LADR-2009-11A/bin/mace4 -f ex3.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file ex3.in


formulas(assumptions).
(all x (wolf(x) -> animal(x))).
(all x (fox(x) -> animal(x))).
(all x (bird(x) -> animal(x))).
(all x (caterpillar(x) -> animal(x))).
(all x (snail(x) -> animal(x))).
(all x (grain(x) -> plant(x))).
(exists x wolf(x)).
(exists x fox(x)).
(exists x bird(x)).
(exists x caterpillar(x)).
(exists x snail(x)).
(exists x grain(x)).
(all x (animal(x) -> (all y (plant(y) -> eats(x,y))) | (all z (animal(z) & smaller(z,x) & (exists u (plant(u) & eats(z,u))) -> eats(x,z))))).
(all x all y (caterpillar(x) & bird(y) -> smaller(x,y))).
(all x all y (snail(x) & bird(y) -> smaller(x,y))).
(all x all y (bird(x) & fox(y) -> smaller(x,y))).
(all x all y (fox(x) & wolf(y) -> smaller(x,y))).
(all x all y (bird(x) & caterpillar(y) -> eats(x,y))).
(all x (caterpillar(x) -> (exists y (plant(y) & eats(x,y))))).
(all x (snail(x) -> (exists y (plant(y) & eats(x,y))))).
(all x all y (wolf(x) & fox(y) -> -eats(x,y))).
(all x all y (wolf(x) & grain(y) -> -eats(x,y))).
(all x all y (bird(x) & snail(y) -> -eats(x,y))).
end_of_list.

formulas(goals).
(exists x exists y (animal(x) & animal(y) & eats(x,y) & (all z (Grain(z) -> eats(y,z))))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (wolf(x) -> animal(x))) # label(non_clause).  [assumption].
2 (all x (fox(x) -> animal(x))) # label(non_clause).  [assumption].
3 (all x (bird(x) -> animal(x))) # label(non_clause).  [assumption].
4 (all x (caterpillar(x) -> animal(x))) # label(non_clause).  [assumption].
5 (all x (snail(x) -> animal(x))) # label(non_clause).  [assumption].
6 (all x (grain(x) -> plant(x))) # label(non_clause).  [assumption].
7 (exists x wolf(x)) # label(non_clause).  [assumption].
8 (exists x fox(x)) # label(non_clause).  [assumption].
9 (exists x bird(x)) # label(non_clause).  [assumption].
10 (exists x caterpillar(x)) # label(non_clause).  [assumption].
11 (exists x snail(x)) # label(non_clause).  [assumption].
12 (exists x grain(x)) # label(non_clause).  [assumption].
13 (all x (animal(x) -> (all y (plant(y) -> eats(x,y))) | (all z (animal(z) & smaller(z,x) & (exists u (plant(u) & eats(z,u))) -> eats(x,z))))) # label(non_clause).  [assumption].
14 (all x all y (caterpillar(x) & bird(y) -> smaller(x,y))) # label(non_clause).  [assumption].
15 (all x all y (snail(x) & bird(y) -> smaller(x,y))) # label(non_clause).  [assumption].
16 (all x all y (bird(x) & fox(y) -> smaller(x,y))) # label(non_clause).  [assumption].
17 (all x all y (fox(x) & wolf(y) -> smaller(x,y))) # label(non_clause).  [assumption].
18 (all x all y (bird(x) & caterpillar(y) -> eats(x,y))) # label(non_clause).  [assumption].
19 (all x (caterpillar(x) -> (exists y (plant(y) & eats(x,y))))) # label(non_clause).  [assumption].
20 (all x (snail(x) -> (exists y (plant(y) & eats(x,y))))) # label(non_clause).  [assumption].
21 (all x all y (wolf(x) & fox(y) -> -eats(x,y))) # label(non_clause).  [assumption].
22 (all x all y (wolf(x) & grain(y) -> -eats(x,y))) # label(non_clause).  [assumption].
23 (all x all y (bird(x) & snail(y) -> -eats(x,y))) # label(non_clause).  [assumption].
24 (exists x exists y (animal(x) & animal(y) & eats(x,y) & (all z (Grain(z) -> eats(y,z))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-wolf(x) | animal(x).
-fox(x) | animal(x).
-bird(x) | animal(x).
-caterpillar(x) | animal(x).
-snail(x) | animal(x).
-grain(x) | plant(x).
wolf(c1).
fox(c2).
bird(c3).
caterpillar(c4).
snail(c5).
grain(c6).
-animal(x) | -plant(y) | eats(x,y) | -animal(z) | -smaller(z,x) | -plant(u) | -eats(z,u) | eats(x,z).
-caterpillar(x) | -bird(y) | smaller(x,y).
-snail(x) | -bird(y) | smaller(x,y).
-bird(x) | -fox(y) | smaller(x,y).
-fox(x) | -wolf(y) | smaller(x,y).
-bird(x) | -caterpillar(y) | eats(x,y).
-caterpillar(x) | plant(f1(x)).
-caterpillar(x) | eats(x,f1(x)).
-snail(x) | plant(f2(x)).
-snail(x) | eats(x,f2(x)).
-wolf(x) | -fox(y) | -eats(x,y).
-wolf(x) | -grain(y) | -eats(x,y).
-bird(x) | -snail(y) | -eats(x,y).
-animal(x) | -animal(y) | -eats(x,y) | Grain(f3(x,y)).
-animal(x) | -animal(y) | -eats(x,y) | -eats(y,f3(x,y)).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=82, kept=82.
Selections=6, assignments=11, propagations=130, current_models=0.
Rewrite_terms=54, rewrite_bools=635, indexes=38.
Rules_from_neg_clauses=28, cross_offs=28.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

============================== MODEL =================================

interpretation( 3, [number=1, seconds=0], [

        function(c1, [ 0 ]),

        function(c2, [ 0 ]),

        function(c3, [ 1 ]),

        function(c4, [ 1 ]),

        function(c5, [ 2 ]),

        function(c6, [ 0 ]),

        function(f1(_), [ 0, 0, 0 ]),

        function(f2(_), [ 0, 0, 0 ]),

        function(f3(_,_), [
			   0, 2, 0,
			   0, 2, 0,
			   0, 0, 0 ]),

        relation(Grain(_), [ 1, 0, 1 ]),

        relation(animal(_), [ 1, 1, 1 ]),

        relation(bird(_), [ 0, 1, 0 ]),

        relation(caterpillar(_), [ 0, 1, 0 ]),

        relation(fox(_), [ 1, 0, 0 ]),

        relation(grain(_), [ 1, 0, 0 ]),

        relation(plant(_), [ 1, 0, 0 ]),

        relation(snail(_), [ 0, 0, 1 ]),

        relation(wolf(_), [ 1, 0, 0 ]),

        relation(eats(_,_), [
			   0, 1, 0,
			   1, 1, 0,
			   1, 0, 0 ]),

        relation(smaller(_,_), [
			   1, 0, 0,
			   1, 1, 0,
			   0, 1, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=207, kept=207.
Selections=33, assignments=52, propagations=168, current_models=1.
Rewrite_terms=89, rewrite_bools=2044, indexes=50.
Rules_from_neg_clauses=14, cross_offs=45.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 98 exit (max_models) Sun Dec  8 21:12:00 2024
The process finished Sun Dec  8 21:12:00 2024
